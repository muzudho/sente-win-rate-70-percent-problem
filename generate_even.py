#
# 生成
# python generate_even.py
#
#   引き分けは考慮していない。
#   先手が勝つのに必要な先取本数と、後手が勝つのに必要な先取本数を探索する。
#

import traceback
import random
import math

from library import BLACK, WHITE, coin, n_bout_without_turn, n_round_without_turn, round_letro


SUMMARY_FILE_PATH = 'output/generate_even.log'

# 誤差は LIMIT に接近するほどベスト。勝率は最低で 0.0、最大で 1.0 なので、0.5 との誤差は 0.5 が最大
# LIMIT 未満からさらに 0 に近づいていくので、そうなる前に打ち切る
LIMIT = 0.005   # 例えば LIMIT = 0.03 にすると、黒番勝率 0.53 のときに 0.5 へ近づけるため 0.03 縮める必要があるから、運悪く 1:1 のときに外すと、そのあと見つけるのに時間がかかるようだ
OUT_OF_ERROR = 0.51

# 先手勝率 0.50 ～ 0.99 まで試算
INPUT_DATA = [
    # 項目   black_win_rate, best_black_win_error, best_max_bout_count, best_round_count, best_w_point
    # 初期値             --,         OUT_OF_ERROR,                   1,                1,                  0
    # ------------------------------------------------------------------------------------------------------
    # これを初期値にして、続きからアルゴリズムを使った自動計算を行います
    [0.50, 0.0002,  1, 2_000_000,  1],  # r2_000_000 [0.0002  1本  1黒  1白]  （自動計算満了）
    [0.51, 0.0094,  1, 2_000_000,  1],  # r2_000_000 [0.0094  1本  1黒  1白]  （自動計算満了）
    [0.52, 0.0064, 47, 2_000_000, 23],  # r2_000_000 [0.0193  1本  1黒  1白][0.0155 43本 23黒 21白][0.0119 45本 24黒 22白][0.0064 47本 25黒 23白]  （自動計算満了）
    [0.53, 0.0086, 31, 2_000_000, 15],  # r2_000_000 [0.0302  1本  1黒  1白][0.0279 27本 15黒 13白][0.0176 29本 16黒 14白][0.0086 31本 17黒 15白]  （自動計算満了）
    [0.54, 0.0024, 25, 2_000_000, 12],  # r2_000_000 [0.0398  1本  1黒  1白][0.0252 21本 12黒 10白][0.0113 23本 13黒 11白][0.0024 25本 14黒 12白]  （自動計算満了）
    [0.55, 0.0058, 19, 2_000_000,  9],  # r2_000_000 [0.0502  1本  1黒  1白][0.0478 15本  9黒  7白][0.0253 17本 10黒  8白][0.0058 19本 11黒  9白]  （自動計算満了）
    [0.56, 0.0072, 17, 2_000_000,  8],  # r2_000_000 [0.0598  1本  1黒  1白][0.0444 13本  8黒  6白][0.0164 15本  9黒  7白][0.0072 17本 10黒  8白]  （自動計算満了）
    [0.57, 0.0082, 29, 2_000_000, 13],  # r2_000_000 [0.0708  1本  1黒  1白][0.0498 11本  7黒  5白][0.0142 13本  8黒  6白][0.0135 20本 12黒  9白][0.0112 22本 13黒 10白][0.0082 29本 17黒 13白]  （自動計算満了）
    [0.58, 0.0045, 25, 2_000_000, 11],  # r2_000_000 [0.0798  1本  1黒  1白][0.0675  9本  6黒  4白][0.0215 11本  7黒  5白][0.0153 13本  8黒  6白][0.0045 25本 15黒 11白]  （自動計算満了）
    [0.59, 0.0048, 11, 2_000_000,  5],  # r2_000_000 [0.0895  1本  1黒  1白][0.0419  9本  6黒  4白][0.0054 11本  7黒  5白]  （自動計算満了）
    [0.60, 0.0098, 34, 2_000_000, 14],  # r2_000_000 [0.1001  1本  1黒  1白][0.0800  7本  5黒  3白][0.0174  9本  6黒  4白][0.0121 19本 12黒  8白][0.0114 24本 15黒 10白][0.0101 29本 18黒 12白][0.0098 34本 21黒 14白]  （自動計算満了）
    [0.61, 0.0075,  9, 2_000_000,  4],  # r2_000_000 [0.1104  1本  1黒  1白][0.0582  7本  5黒  3白][0.0077  9本  6黒  4白]  （自動計算満了）
    [0.62, 0.0032, 12, 2_000_000,  5],  # r2_000_000 [0.1199  1本  1黒  1白][0.1156  2本  2黒  1白][0.0355  7本  5黒  3白][0.0334  9本  6黒  4白][0.0032 12本  8黒  5白]  （自動計算満了）
    [0.63, 0.0057, 23, 2_000_000,  9],  # r2_000_000 [0.1301  1本  1黒  1白][0.1029  2本  2黒  1白][0.0138  7本  5黒  3白][0.0057 23本 15黒  9白]  （自動計算満了）
    [0.64, 0.0087,  7, 2_000_000,  3],  # r2_000_000 [0.1402  1本  1黒  1白][0.0902  2本  2黒  1白][0.0088  7本  5黒  3白]  （自動計算満了）
    [0.65, 0.0000, 13, 2_000_000,  5],  # r2_000_000 [0.1496  1本  1黒  1白][0.0770  2本  2黒  1白][0.0716  5本  4黒  2白][0.0323  7本  5黒  3白][0.0006 13本  9黒  5白]  （自動計算満了）
    [0.66, 0.0086, 25, 2_000_000,  9],  # r2_000_000 [0.1601  1本  1黒  1白][0.0646  2本  2黒  1白][0.0520  5本  4黒  2白][0.0475  8本  6黒  3白][0.0458 11本  8黒  4白][0.0317 13本  9黒  5白][0.0182 19本 13黒  7白][0.0188 19本 13黒  7白][0.0086 25本 17黒  9白]  （自動計算満了）
    [0.67, 0.0085, 20, 2_000_000,  7],  # r2_000_000 [0.1707  1本  1黒  1白][0.0509  2本  2黒  1白][0.0328  5本  4黒  2白][0.0241  8本  6黒  3白][0.0178 11本  8黒  4白][0.0133 14本 10黒  5白][0.0136 14本 10黒  5白][0.0105 17本 12黒  6白][0.0085 20本 14黒  7白]  （自動計算満了）
    [0.68, 0.0011,  8, 2_000_000,  3],  # r2_000_000 [0.1804  1本  1黒  1白][0.0378  2本  2黒  1白][0.0118  5本  4黒  2白][0.0011  8本  6黒  3白]  （自動計算満了）
    [0.69, 0.0074,  5, 2_000_000,  2],  # r2_000_000 [0.1903  1本  1黒  1白][0.0239  2本  2黒  1白][0.0077  5本  4黒  2白]  （自動計算満了）
    [0.70, 0.0099,  2, 2_000_000,  1],  # r2_000_000 [0.1996  1本  1黒  1白][0.0099  2本  2黒  1白]  （自動計算満了）
    [0.71, 0.0033,  2, 2_000_000,  1],  # r2_000_000 [0.2105  1本  1黒  1白][0.0033  2本  2黒  1白]  （自動計算満了）
    [0.72, 0.0021, 27, 2_000_000,  8],  # r2_000_000 [0.2199  1本  1黒  1白][0.0189  2本  2黒  1白][0.0158 13本 10黒  4白][0.0021 27本 20黒  8白]  （自動計算満了）
    [0.73, 0.0028, 17, 2_000_000,  5],  # r2_000_000 [0.2295  1本  1黒  1白][0.0330  2本  2黒  1白][0.0175 13本 10黒  4白][0.0028 17本 13黒  5白]  （自動計算満了）
    [0.74, 0.0038, 10, 2_000_000,  3],  # r2_000_000 [0.2402  1本  1黒  1白][0.0476  2本  2黒  1白][0.0047 10本  8黒  3白]  （自動計算満了）
    [0.75, 0.0096, 58, 2_000_000, 15],  # r2_000_000 [0.2505  1本  1黒  1白][0.0623  2本  2黒  1白][0.0553  7本  6黒  2白][0.0256 10本  8黒  3白][0.0194 18本 14黒  5白][0.0150 26本 20黒  7白][0.0131 34本 26黒  9白][0.0125 38本 29黒 10白][0.0119 42本 32黒 11白][0.0108 50本 38黒 13白][0.0107 54本 41黒 14白][0.0096 58本 44黒 15白]  （自動計算満了）
    [0.76, 0.0023, 15, 2_000_000,  4],  # r2_000_000 [0.2599  1本  1黒  1白][0.0775  2本  2黒  1白][0.0604  3本  3黒  1白][0.0306  7本  6黒  2白][0.0137 11本  9黒  3白][0.0023 15本 12黒  4白]  （自動計算満了）
    [0.77, 0.0039,  7, 2_000_000,  2],  # r2_000_000 [0.2697  1本  1黒  1白][0.0927  2本  2黒  1白][0.0437  3本  3黒  1白][0.0039  7本  6黒  2白]  （自動計算満了）
    [0.78, 0.0048, 21, 2_000_000,  5],  # r2_000_000 [0.2798  1本  1黒  1白][0.1081  2本  2黒  1白][0.0259  3本  3黒  1白][0.0225  7本  6黒  2白][0.0048 21本 17黒  5白]  （自動計算満了）
    [0.79, 0.0066,  3, 2_000_000,  1],  # r2_000_000 [0.2899  1本  1黒  1白][0.1240  2本  2黒  1白][0.0070  3本  3黒  1白]  （自動計算満了）
    [0.80, 0.0015, 11, 2_000_000,  3],  # r2_000_000 [0.3000  1本  1黒  1白][0.1401  2本  2黒  1白][0.0123  3本  3黒  1白][0.0015 13本 11黒  3白]  （自動計算満了）
    [0.81, 0.0003, 19, 2_000_000,  4],  # r2_000_000 [0.3097  1本  1黒  1白][0.1563  2本  2黒  1白][0.0315  3本  3黒  1白][0.0137 14本 12黒  3白][0.0003 19本 16黒  4白]  （自動計算満了）
    [0.82, 0.0005,  9, 2_000_000,  2],  # r2_000_000 [0.3199  1本  1黒  1白][0.1724  2本  2黒  1白][0.0505  3本  3黒  1白][0.0476  4本  4黒  1白][0.0016  9本  8黒  2白]  （自動計算満了）
    [0.83, 0.0049, 27, 2_000_000,  5],  # r2_000_000 [0.3300  1本  1黒  1白][0.1890  2本  2黒  1白][0.0720  3本  3黒  1白][0.0255  4本  4黒  1白][0.0102 21本 18黒  4白][0.0049 27本 23黒  5白]  （自動計算満了）
    [0.84, 0.0013,  4, 2_000_000,  1],  # r2_000_000 [0.3401  1本  1黒  1白][0.2059  2本  2黒  1白][0.0929  3本  3黒  1白][0.0026  4本  4黒  1白]  （自動計算満了）
    [0.85, 0.0079, 11, 2_000_000,  2],  # r2_000_000 [0.3501  1本  1黒  1白][0.2225  2本  2黒  1白][0.1143  3本  3黒  1白][0.0219  4本  4黒  1白][0.0079 11本 10黒  2白]  （自動計算満了）
    [0.86, 0.0087, 19, 2_000_000,  3],  # r2_000_000 [0.3600  1本  1黒  1白][0.2396  2本  2黒  1白][0.1361  3本  3黒  1白][0.0471  4本  4黒  1白][0.0301  5本  5黒  1白][0.0094 19本 17黒  3白]  （自動計算満了）
    [0.87, 0.0015,  5, 2_000_000,  1],  # r2_000_000 [0.3704  1本  1黒  1白][0.2563  2本  2黒  1白][0.1585  3本  3黒  1白][0.0730  4本  4黒  1白][0.0019  5本  5黒  1白]  （自動計算満了）
    [0.88, 0.0015, 22, 2_000_000,  3],  # r2_000_000 [0.3802  1本  1黒  1白][0.2743  2本  2黒  1白][0.1819  3本  3黒  1白][0.1003  4本  4黒  1白][0.0274  5本  5黒  1白][0.0259 13本 12黒  2白][0.0016 22本 20黒  3白]  （自動計算満了）
    [0.89, 0.0026,  6, 2_000_000,  1],  # r2_000_000 [0.3901  1本  1黒  1白][0.2929  2本  2黒  1白][0.2048  3本  3黒  1白][0.1271  4本  4黒  1白][0.0580  5本  5黒  1白][0.0034  6本  6黒  1白]  （自動計算満了）
    [0.90, 0.0071, 46, 2_000_000,  5],  # r2_000_000 [0.3998  1本  1黒  1白][0.3096  2本  2黒  1白][0.2298  3本  3黒  1白][0.1564  4本  4黒  1白][0.0903  5本  5黒  1白][0.0312  6本  6黒  1白][0.0211  7本  7黒  1白][0.0183 17本 16黒  2白][0.0104 26本 24黒  3白][0.0071 46本 42黒  5白]  （自動計算満了）
    [0.91, 0.0085, 29, 2_000_000,  3],  # r2_000_000 [0.4100  1本  1黒  1白][0.3280  2本  2黒  1白][0.2535  3本  3黒  1白][0.1857  4本  4黒  1白][0.1245  5本  5黒  1白][0.0682  6本  6黒  1白][0.0165  7本  7黒  1白][0.0085 29本 27黒  3白]  （自動計算満了）
    [0.92, 0.0092, 21, 2_000_000,  2],  # r2_000_000 [0.4199  1本  1黒  1白][0.3463  2本  2黒  1白][0.2783  3本  3黒  1白][0.2168  4本  4黒  1白][0.1590  5本  5黒  1白][0.1063  6本  6黒  1白][0.0578  7本  7黒  1白][0.0128  8本  8黒  1白][0.0092 21本 20黒  2白]  （自動計算満了）
    [0.93, 0.0087, 24, 2_000_000,  2],  # r2_000_000 [0.4299  1本  1黒  1白][0.3652  2本  2黒  1白][0.3044  3本  3黒  1白][0.2480  4本  4黒  1白][0.1955  5本  5黒  1白][0.1471  6本  6黒  1白][0.1013  7本  7黒  1白][0.0599  8本  8黒  1白][0.0200  9本  9黒  1白][0.0157 10本 10黒  1白][0.0139 23本 22黒  2白][0.0087 24本 23黒  2白]  （自動計算満了）
    [0.94, 0.0061, 11, 2_000_000,  1],  # r2_000_000 [0.4402  1本  1黒  1白][0.3836  2本  2黒  1白][0.3304  3本  3黒  1白][0.2809  4本  4黒  1白][0.2338  5本  5黒  1白][0.1897  6本  6黒  1白][0.1483  7本  7黒  1白][0.1094  8本  8黒  1白][0.0726  9本  9黒  1白][0.0390 10本 10黒  1白][0.0061 11本 11黒  1白]  （自動計算満了）
    [0.95, 0.0043, 33, 2_000_000,  2],  # r2_000_000 [0.4499  1本  1黒  1白][0.4023  2本  2黒  1白][0.3571  3本  3黒  1白][0.3139  4本  4黒  1白][0.2734  5本  5黒  1白][0.2353  6本  6黒  1白][0.1979  7本  7黒  1白][0.1639  8本  8黒  1白][0.1301  9本  9黒  1白][0.0991 10本 10黒  1白][0.0686 11本 11黒  1白][0.0406 12本 12黒  1白][0.0127 13本 13黒  1白][0.0116 14本 14黒  1白][0.0043 33本 32黒  2白]  （自動計算満了）
    [0.96, 0.0003, 17, 2_000_000,  1],  # r2_000_000 [0.4598  1本  1黒  1白][0.4215  2本  2黒  1白][0.3848  3本  3黒  1白][0.3493  4本  4黒  1白][0.3156  5本  5黒  1白][0.2823  6本  6黒  1白][0.2511  7本  7黒  1白][0.2217  8本  8黒  1白][0.1930  9本  9黒  1白][0.1650 10本 10黒  1白][0.1382 11本 11黒  1白][0.1128 12本 12黒  1白][0.0880 13本 13黒  1白][0.0641 14本 14黒  1白][0.0421 15本 15黒  1白][0.0205 16本 16黒  1白][0.0003 17本 17黒  1白]  （自動計算満了）
    [0.97, 0.0036, 23, 2_000_000,  1],  # r2_000_000 [0.4701  1本  1黒  1白][0.4409  2本  2黒  1白][0.4131  3本  3黒  1白][0.3854  4本  4黒  1白][0.3588  5本  5黒  1白][0.3328  6本  6黒  1白][0.3078  7本  7黒  1白][0.2838  8本  8黒  1白][0.2599  9本  9黒  1白][0.2373 10本 10黒  1白][0.2156 11本 11黒  1白][0.1936 12本 12黒  1白][0.1729 13本 13黒  1白][0.1527 14本 14黒  1白][0.1332 15本 15黒  1白][0.1146 16本 16黒  1白][0.0958 17本 17黒  1白][0.0776 18本 18黒  1白][0.0605 19本 19黒  1白][0.0438 20本 20黒  1白][0.0279 21本 21黒  1白][0.0109 22本 22黒  1白][0.0036 23本 23黒  1白]  （自動計算満了）
    [0.98, 0.0030, 34, 2_000_000,  1],  # r2_000_000 [0.4802  1本  1黒  1白][0.4606  2本  2黒  1白][0.4411  3本  3黒  1白][0.4222  4本  4黒  1白][0.4040  5本  5黒  1白][0.3855  6本  6黒  1白][0.3680  7本  7黒  1白][0.3504  8本  8黒  1白][0.3337  9本  9黒  1白][0.3172 10本 10黒  1白][0.3010 11本 11黒  1白][0.2846 12本 12黒  1白][0.2689 13本 13黒  1白][0.2533 14本 14黒  1白][0.2392 15本 15黒  1白][0.2242 16本 16黒  1白][0.2094 17本 17黒  1白][0.1954 18本 18黒  1白][0.1805 19本 19黒  1白][0.1672 20本 20黒  1白][0.1542 21本 21黒  1白][0.1415 22本 22黒  1白][0.1283 23本 23黒  1白][0.1156 24本 24黒  1白][0.1036 25本 25黒  1白][0.0910 26本 26黒  1白][0.0793 27本 27黒  1白][0.0681 28本 28黒  1白][0.0564 29本 29黒  1白][0.0463 30本 30黒  1白][0.0346 31本 31黒  1白][0.0239 32本 32黒  1白][0.0131 33本 33黒  1白][0.0130 33本 33黒  1白][0.0030 34本 34黒  1白]  （自動計算満了）
    [0.99, 0.0098, 67, 2_000_000,  1],  # r2_000_000 [0.4900  1本  1黒  1白][0.4801  2本  2黒  1白][0.4704  3本  3黒  1白][0.4607  4本  4黒  1白][0.4512  5本  5黒  1白][0.4414  6本  6黒  1白][0.4319  7本  7黒  1白][0.4227  8本  8黒  1白][0.4136  9本  9黒  1白][0.4044 10本 10黒  1白][0.3955 11本 11黒  1白][0.3862 12本 12黒  1白][0.3775 13本 13黒  1白][0.3690 14本 14黒  1白][0.3601 15本 15黒  1白][0.3513 16本 16黒  1白][0.3434 17本 17黒  1白][0.3345 18本 18黒  1白][0.3263 19本 19黒  1白][0.3179 20本 20黒  1白][0.3096 21本 21黒  1白][0.3013 22本 22黒  1白][0.2938 23本 23黒  1白][0.2858 24本 24黒  1白][0.2781 25本 25黒  1白][0.2699 26本 26黒  1白][0.2627 27本 27黒  1白][0.2545 28本 28黒  1白][0.2469 29本 29黒  1白][0.2394 30本 30黒  1白][0.2327 31本 31黒  1白][0.2251 32本 32黒  1白][0.2167 33本 33黒  1白][0.2107 34本 34黒  1白][0.1968 36本 36黒  1白][0.1889 37本 37黒  1白][0.1826 38本 38黒  1白][0.1685 40本 40黒  1白][0.1626 41本 41黒  1白][0.1487 43本 43黒  1白][0.1365 45本 45黒  1白][0.1235 47本 47黒  1白][0.1109 49本 49黒  1白][0.0931 52本 52黒  1白][0.0757 55本 55黒  1白][0.0583 58本 58黒  1白][0.0413 61本 61黒  1白][0.0200 65本 65黒  1白][0.0154 66本 66黒  1白][0.0098 67本 67黒  1白]  （自動計算満了）
]


########################################
# コマンドから実行時
########################################


if __name__ == '__main__':
    """コマンドから実行時"""

    try:

        for rule in INPUT_DATA:
            # 初期値
            black_win_rate=rule[0]
            best_black_win_error=rule[1]
            best_max_bout_count=rule[2]
            best_round_count=rule[3]
            best_w_point=rule[4]

            # 黒の必要先取数は計算で求めます
            best_b_point = best_max_bout_count-best_w_point+1

            is_automatic = best_black_win_error >= LIMIT or best_max_bout_count == 0 or best_round_count < 2_000_000 or best_w_point == 0

            # 途中の計算式
            calculation_list = []

            # アルゴリズムで求めるケース
            if is_automatic:

                is_cutoff = False

                # ［最大ｎ本勝負］
                for max_bout_count in range(best_max_bout_count, 101):

                    # １本勝負のときだけ、白はｎ本－１ではない
                    if max_bout_count == 1:
                        end_w_point = 2
                    else:
                        end_w_point = max_bout_count

                    for w_point in range(1, end_w_point):

                        black_win_count = n_round_without_turn(
                            black_win_rate=black_win_rate,
                            bout_count=max_bout_count,
                            w_point=w_point,
                            round_count=best_round_count)
                        
                        #print(f"{black_win_count=}  {best_round_count=}  {black_win_count / best_round_count=}")
                        black_win_error = abs(black_win_count / best_round_count - 0.5)

                        if black_win_error < best_black_win_error:
                            best_black_win_error = black_win_error
                            best_max_bout_count = max_bout_count
                            best_b_point = black_win_count
                            best_w_point = w_point
                        
                            # 進捗バー（更新時）
                            text = f'[{best_black_win_error:6.4f} {best_max_bout_count:2}本 {best_max_bout_count-best_w_point+1:2}黒 {best_w_point:2}白]'
                            print(text, end='', flush=True) # すぐ表示
                            calculation_list.append(text)

                            # 十分な答えが出たので探索を打ち切ります
                            if black_win_error < LIMIT:
                                is_cutoff = True

                                # 進捗バー
                                print('x', end='', flush=True)

                                break

                    if is_cutoff:
                        break

                    # 進捗バー（ｎ本目）
                    print('.', end='', flush=True)
                print() # 改行

            # 結果が設定されていれば、そのまま表示
            else:
                pass


            with open(SUMMARY_FILE_PATH, 'a', encoding='utf8') as f:

                # 自動計算未完了
                if is_automatic and best_black_win_error == OUT_OF_ERROR:
                    text = f"先手勝率：{black_win_rate:4.02f}"                
                else:

                    # DO 通分したい。最小公倍数を求める
                    lcm = math.lcm(best_b_point, best_w_point)
                    # 先手一本の価値
                    b_unit = lcm / best_b_point
                    # 後手一本の価値
                    w_unit = lcm / best_w_point
                    # 先手勝ち、後手勝ちの共通ゴール
                    b_win_value_goal = best_w_point * w_unit
                    w_win_value_goal = best_b_point * b_unit
                    if b_win_value_goal != w_win_value_goal:
                        raise ValueError(f"{b_win_value_goal=}  {w_win_value_goal=}")

                    # 自動計算満了
                    if is_automatic:
                        text = f"先手勝率：{black_win_rate:4.02f}  {best_max_bout_count:2}本勝負×{best_round_count:6}回  先手{best_max_bout_count-best_w_point+1:2}本先取/後手{best_w_point:2}本先取制  調整先手勝率：{best_b_point * 100 / best_round_count:>7.04f} ％  つまり、先手一本の価値{b_unit:2.0f}  後手一本の価値{w_unit:2.0f}  ゴール{b_win_value_goal:3.0f}"
                    
                    # 手動設定
                    else:
                        text = f"先手勝率：{black_win_rate:4.02f}  {best_max_bout_count:2}本勝負×{best_round_count:6}回  先手{best_max_bout_count-best_w_point+1:2}本先取/後手{best_w_point:2}本先取制  調整先手勝率：{(best_black_win_error + 0.5) * 100:7.04f} ％  つまり、先手一本の価値{b_unit:2.0f}  後手一本の価値{w_unit:2.0f}  ゴール{b_win_value_goal:3.0f}"


                # 計算過程を付けずに表示
                # --------------------

                # 自動計算未完了
                if is_automatic and best_black_win_error == OUT_OF_ERROR:
                    print(f"{text}  （自動計算未完了）")

                else:
                    # 自動計算満了
                    if is_automatic:
                        print(f"{text}  （自動計算満了）")
                    # 手動設定
                    else:
                        print(f"{text}  （手動設定）")


                # 計算過程と改行を付けてファイルへ出力
                # ---------------------------------

                # 自動計算
                if is_automatic:
                    # 計算過程
                    text += f"  {''.join(calculation_list)}"

                    # 未完了
                    if best_black_win_error == OUT_OF_ERROR:
                        text += "  （自動計算未完了）\n"
                    # 満了
                    else:
                        text += "  （自動計算満了）\n"

                # 手動設定
                else:
                    text += " （手動設定）\n"

                f.write(text)


    except Exception as err:
        print(f"[unexpected error] {err=}  {type(err)=}")

        # スタックトレース表示
        print(traceback.format_exc())

        raise
