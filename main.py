# python main.py
import traceback
import random
import math

# 四捨五入 📖 [Pythonで小数・整数を四捨五入するroundとDecimal.quantize](https://note.nkmk.me/python-round-decimal-quantize/)
from decimal import Decimal, getcontext, ROUND_HALF_UP

# 黒。先手
BLACK = 1

# 白。後手
WHITE = 2


def coin(black_rate):
    """表が黒、裏が白のコイン

    Parameters
    ----------
    black_rate : float
        黒が出る確率。例： 黒が７割出るなら 0.7
    """
    if random.random() < black_rate:
        return BLACK
    return WHITE


def n_bout(n, black_rate, white_require):
    """ｎ本勝負
    
    n はコインを振る回数。全部黒が出たら黒の勝ち、white_require 回白が出れば白の勝ち。

    例えば n=1 なら、コインを最大１回振る。１勝先取で勝ち。
    n=2 なら、コインを最大２回振る。２勝先取で勝ち。白は１勝のアドバンテージが付いている。
    n=3 なら、コインを最大３回振る。３勝先取で勝ち。白は２勝のアドバンテージが付いている。
    以下同様。

    Parameters
    ----------
    n : int
        ｎ本勝負
    black_rate : float
        黒番の勝率。例： 黒番の勝率が７割なら 0.7
    white_require : int
        白が勝つのに必要な番数
    
    Returns
    -------
    winner_color : int
        勝った方の色
    """
    white_count_down = white_require

    for i in range(0, n):
        if coin(black_rate) == WHITE:
            white_count_down -= 1
            if white_count_down < 1:
                return WHITE

    return BLACK


def n_round(black_win_rate, bout_count, white_require, round_count):
    """ｎ回対局

    ｎ回対局して黒が勝った回数を返す。
    
    Parameters
    ----------
    black_win_rate : float
        黒番の勝率。例： 黒番が７割勝つなら 0.7
    bout_count : int
        ｎ本勝負。例： ３本勝負なら 3
    white_require : int
        白が勝つのに必要な番数
    round_count : int
        ｎ回対局
    
    Returns
    -------
    black_win_count : int
        黒の勝った数
    """
    black_win_count = 0

    for i in range(0, round_count):
        if n_bout(bout_count, black_win_rate, white_require) == BLACK:
            black_win_count += 1

    return black_win_count


def round_letro(number):
    """四捨五入

    📖 [Pythonで小数・整数を四捨五入するroundとDecimal.quantize](https://note.nkmk.me/python-round-decimal-quantize/)

    Parameters
    ----------
    number : float
        四捨五入したい数
    
    Returns
    -------
    answer : int
        整数
    """
    return int(Decimal(str(number)).quantize(Decimal('0'), ROUND_HALF_UP))


########################################
# コマンドから実行時
########################################


if __name__ == '__main__':
    """コマンドから実行時"""

    try:

        # 0.50 ～ 0.99 まで試算
        rule_list = [
            # black_win_rate, best_black_win_error, best_bout_count, best_round_count, best_white_require
            # -------------------------------------------------------------------------------------------
            # 人の目で見て十分だと思ったら、best_bout_count と best_white_require を 0 以外にすること
            [0.50, 0.0002,  1, 2_000_000,  1],  # r2_000_000 [0.0002  1本  1黒  1白]  （自動計算満了）
            [0.51, 0.0094,  1, 2_000_000,  1],  # r2_000_000 [0.0094  1本  1黒  1白]  （自動計算満了）
            [0.52, 0.0193,  1, 2_000_000,  1],  # r2_000_000 [0.0193  1本  1黒  1白]  （自動計算満了）
            [0.53, 0.0176, 29, 2_000_000, 14],  # r2_000_000 [0.0302  1本  1黒  1白][0.0279 27本 15黒 13白][0.0176 29本 16黒 14白]  （自動計算満了）
            [0.54, 0.0113, 23, 2_000_000, 11],  # r2_000_000 [0.0398  1本  1黒  1白][0.0252 21本 12黒 10白][0.0113 23本 13黒 11白]  （自動計算満了）
            [0.55, 0.0058, 19, 2_000_000,  9],  # r2_000_000 [0.0502  1本  1黒  1白][0.0478 15本  9黒  7白][0.0253 17本 10黒  8白][0.0058 19本 11黒  9白]  （自動計算満了）
            [0.56, 0.0162, 15, 2_000_000,  7],  # r2_000_000 [0.0598  1本  1黒  1白][0.0444 13本  8黒  6白][0.0164 15本  9黒  7白]  （自動計算満了）
            [0.57, 0.0142, 13, 2_000_000,  6],  # r2_000_000 [0.0708  1本  1黒  1白][0.0498 11本  7黒  5白][0.0142 13本  8黒  6白]  （自動計算満了）
            [0.58, 0.0153, 13, 2_000_000,  6],  # r2_000_000 [0.0798  1本  1黒  1白][0.0675  9本  6黒  4白][0.0215 11本  7黒  5白][0.0153 13本  8黒  6白]  （自動計算満了）
            [0.59, 0.0048, 11, 2_000_000,  5],  # r2_000_000 [0.0895  1本  1黒  1白][0.0419  9本  6黒  4白][0.0054 11本  7黒  5白]  （自動計算満了）
            [0.60, 0.0174,  9, 2_000_000,  4],  # r2_000_000 [0.1001  1本  1黒  1白][0.0800  7本  5黒  3白][0.0174  9本  6黒  4白]  （自動計算満了）
            [0.61, 0.0075,  9, 2_000_000,  4],  # r2_000_000 [0.1104  1本  1黒  1白][0.0582  7本  5黒  3白][0.0077  9本  6黒  4白]  （自動計算満了）
            [0.62, 0.0032, 12, 2_000_000,  5],  # r2_000_000 [0.1199  1本  1黒  1白][0.1156  2本  2黒  1白][0.0355  7本  5黒  3白][0.0334  9本  6黒  4白][0.0032 12本  8黒  5白]  （自動計算満了）
            [0.63, 0.0129,  7, 2_000_000,  3],  # r2_000_000 [0.1301  1本  1黒  1白][0.1029  2本  2黒  1白][0.0138  7本  5黒  3白]  （自動計算満了）
            [0.64, 0.0087,  7, 2_000_000,  3],  # r2_000_000 [0.1402  1本  1黒  1白][0.0902  2本  2黒  1白][0.0088  7本  5黒  3白]  （自動計算満了）
            [0.65, 0.0000, 13, 2_000_000,  5],  # r2_000_000 [0.1496  1本  1黒  1白][0.0770  2本  2黒  1白][0.0716  5本  4黒  2白][0.0323  7本  5黒  3白][0.0006 13本  9黒  5白]  （自動計算満了）
            [0.66, 0.0178, 19, 2_000_000,  7],  # r2_000_000 [0.1601  1本  1黒  1白][0.0646  2本  2黒  1白][0.0520  5本  4黒  2白][0.0475  8本  6黒  3白][0.0458 11本  8黒  4白][0.0317 13本  9黒  5白][0.0182 19本 13黒  7白]  （自動計算満了）
            [0.67, 0.0174, 11, 2_000_000,  4],  # r2_000_000 [0.1707  1本  1黒  1白][0.0509  2本  2黒  1白][0.0328  5本  4黒  2白][0.0241  8本  6黒  3白][0.0178 11本  8黒  4白]  （自動計算満了）
            [0.68, 0.0118,  5, 2_000_000,  2],  # r2_000_000 [0.1804  1本  1黒  1白][0.0378  2本  2黒  1白][0.0118  5本  4黒  2白]  （自動計算満了）
            [0.69, 0.0074,  5, 2_000_000,  2],  # r2_000_000 [0.1903  1本  1黒  1白][0.0239  2本  2黒  1白][0.0077  5本  4黒  2白]  （自動計算満了）
            [0.70, 0.0099,  2, 2_000_000,  1],  # r2_000_000 [0.1996  1本  1黒  1白][0.0099  2本  2黒  1白]  （自動計算満了）
            [0.71, 0.0033,  2, 2_000_000,  1],  # r2_000_000 [0.2105  1本  1黒  1白][0.0033  2本  2黒  1白]  （自動計算満了）
            [0.72, 0.0182,  2, 2_000_000,  1],  # r2_000_000 [0.2199  1本  1黒  1白][0.0189  2本  2黒  1白]  （自動計算満了）
            [0.73, 0.0171, 13, 2_000_000,  4],  # r2_000_000 [0.2295  1本  1黒  1白][0.0330  2本  2黒  1白][0.0175 13本 10黒  4白]  （自動計算満了）
            [0.74, 0.0038, 10, 2_000_000,  3],  # r2_000_000 [0.2402  1本  1黒  1白][0.0476  2本  2黒  1白][0.0047 10本  8黒  3白]  （自動計算満了）
            [0.75, 0.0187, 18, 2_000_000,  5],  # r2_000_000 [0.2505  1本  1黒  1白][0.0623  2本  2黒  1白][0.0553  7本  6黒  2白][0.0256 10本  8黒  3白][0.0194 18本 14黒  5白]  （自動計算満了）
            [0.76, 0.0133, 11, 2_000_000,  3],  # r2_000_000 [0.2599  1本  1黒  1白][0.0775  2本  2黒  1白][0.0604  3本  3黒  1白][0.0306  7本  6黒  2白][0.0137 11本  9黒  3白]  （自動計算満了）
            [0.77, 0.0039,  7, 2_000_000,  2],  # r2_000_000 [0.2697  1本  1黒  1白][0.0927  2本  2黒  1白][0.0437  3本  3黒  1白][0.0039  7本  6黒  2白]  （自動計算満了）
            [0.78, 0.0048, 21, 2_000_000,  5],  # r2_000_000 [0.2798  1本  1黒  1白][0.1081  2本  2黒  1白][0.0259  3本  3黒  1白][0.0225  7本  6黒  2白][0.0048 21本 17黒  5白]  （自動計算満了）
            [0.79, 0.0066,  3, 2_000_000,  1],  # r2_000_000 [0.2899  1本  1黒  1白][0.1240  2本  2黒  1白][0.0070  3本  3黒  1白]  （自動計算満了）
            [0.80, 0.0114,  3, 2_000_000,  1],  # r2_000_000 [0.3000  1本  1黒  1白][0.1401  2本  2黒  1白][0.0123  3本  3黒  1白]  （自動計算満了）
            [0.81, 0.0133, 12, 2_000_000,  3],  # r2_000_000 [0.3097  1本  1黒  1白][0.1563  2本  2黒  1白][0.0315  3本  3黒  1白][0.0137 14本 12黒  3白]  （自動計算満了）
            [0.82, 0.0005,  9, 2_000_000,  2],  # r2_000_000 [0.3199  1本  1黒  1白][0.1724  2本  2黒  1白][0.0505  3本  3黒  1白][0.0476  4本  4黒  1白][0.0016  9本  8黒  2白]  （自動計算満了）
            [0.83, 0.0102, 21, 2_000_000,  4],  # r2_000_000 [0.3300  1本  1黒  1白][0.1890  2本  2黒  1白][0.0720  3本  3黒  1白][0.0255  4本  4黒  1白][0.0102 21本 18黒  4白]  （自動計算満了）
            [0.84, 0.0013,  4, 2_000_000,  1],  # r2_000_000 [0.3401  1本  1黒  1白][0.2059  2本  2黒  1白][0.0929  3本  3黒  1白][0.0026  4本  4黒  1白]  （自動計算満了）
            [0.85, 0.0079, 11, 2_000_000,  2],  # r2_000_000 [0.3501  1本  1黒  1白][0.2225  2本  2黒  1白][0.1143  3本  3黒  1白][0.0219  4本  4黒  1白][0.0079 11本 10黒  2白]  （自動計算満了）
            [0.86, 0.0087, 19, 2_000_000,  3],  # r2_000_000 [0.3600  1本  1黒  1白][0.2396  2本  2黒  1白][0.1361  3本  3黒  1白][0.0471  4本  4黒  1白][0.0301  5本  5黒  1白][0.0094 19本 17黒  3白]  （自動計算満了）
            [0.87, 0.0015,  5, 2_000_000,  1],  # r2_000_000 [0.3704  1本  1黒  1白][0.2563  2本  2黒  1白][0.1585  3本  3黒  1白][0.0730  4本  4黒  1白][0.0019  5本  5黒  1白]  （自動計算満了）
            [0.88, 0.0015, 22, 2_000_000,  3],  # r2_000_000 [0.3802  1本  1黒  1白][0.2743  2本  2黒  1白][0.1819  3本  3黒  1白][0.1003  4本  4黒  1白][0.0274  5本  5黒  1白][0.0259 13本 12黒  2白][0.0016 22本 20黒  3白]  （自動計算満了）
            [0.89, 0.0026,  6, 2_000_000,  1],  # r2_000_000 [0.3901  1本  1黒  1白][0.2929  2本  2黒  1白][0.2048  3本  3黒  1白][0.1271  4本  4黒  1白][0.0580  5本  5黒  1白][0.0034  6本  6黒  1白]  （自動計算満了）
            [0.90, 0.0180, 17, 2_000_000,  2],  # r2_000_000 [0.3998  1本  1黒  1白][0.3096  2本  2黒  1白][0.2298  3本  3黒  1白][0.1564  4本  4黒  1白][0.0903  5本  5黒  1白][0.0312  6本  6黒  1白][0.0211  7本  7黒  1白][0.0183 17本 16黒  2白]  （自動計算満了）
            [0.91, 0.0163,  7, 2_000_000,  1],  # r2_000_000 [0.4100  1本  1黒  1白][0.3280  2本  2黒  1白][0.2535  3本  3黒  1白][0.1857  4本  4黒  1白][0.1245  5本  5黒  1白][0.0682  6本  6黒  1白][0.0165  7本  7黒  1白]  （自動計算満了）
            [0.92, 0.0127,  8, 2_000_000,  1],  # r2_000_000 [0.4199  1本  1黒  1白][0.3463  2本  2黒  1白][0.2783  3本  3黒  1白][0.2168  4本  4黒  1白][0.1590  5本  5黒  1白][0.1063  6本  6黒  1白][0.0578  7本  7黒  1白][0.0128  8本  8黒  1白]  （自動計算満了）
            [0.93, 0.0160, 10, 2_000_000,  1],  # r2_000_000 [0.4299  1本  1黒  1白][0.3652  2本  2黒  1白][0.3044  3本  3黒  1白][0.2480  4本  4黒  1白][0.1955  5本  5黒  1白][0.1471  6本  6黒  1白][0.1013  7本  7黒  1白][0.0599  8本  8黒  1白][0.0200  9本  9黒  1白]  （自動計算満了）
            [0.94, 0.0061, 11, 2_000_000,  1],  # r2_000_000 [0.4402  1本  1黒  1白][0.3836  2本  2黒  1白][0.3304  3本  3黒  1白][0.2809  4本  4黒  1白][0.2338  5本  5黒  1白][0.1897  6本  6黒  1白][0.1483  7本  7黒  1白][0.1094  8本  8黒  1白][0.0726  9本  9黒  1白][0.0390 10本 10黒  1白][0.0061 11本 11黒  1白]  （自動計算満了）
            [0.95, 0.0127, 13, 2_000_000,  1],  # r2_000_000 [0.4499  1本  1黒  1白][0.4023  2本  2黒  1白][0.3571  3本  3黒  1白][0.3139  4本  4黒  1白][0.2734  5本  5黒  1白][0.2353  6本  6黒  1白][0.1979  7本  7黒  1白][0.1639  8本  8黒  1白][0.1301  9本  9黒  1白][0.0991 10本 10黒  1白][0.0686 11本 11黒  1白][0.0406 12本 12黒  1白][0.0127 13本 13黒  1白]  （自動計算満了）
            [0.96, 0.0003, 17, 2_000_000,  1],  # r2_000_000 [0.4598  1本  1黒  1白][0.4215  2本  2黒  1白][0.3848  3本  3黒  1白][0.3493  4本  4黒  1白][0.3156  5本  5黒  1白][0.2823  6本  6黒  1白][0.2511  7本  7黒  1白][0.2217  8本  8黒  1白][0.1930  9本  9黒  1白][0.1650 10本 10黒  1白][0.1382 11本 11黒  1白][0.1128 12本 12黒  1白][0.0880 13本 13黒  1白][0.0641 14本 14黒  1白][0.0421 15本 15黒  1白][0.0205 16本 16黒  1白][0.0003 17本 17黒  1白]  （自動計算満了）
            [0.97, 0.0109, 22, 2_000_000,  1],  # r2_000_000 [0.4701  1本  1黒  1白][0.4409  2本  2黒  1白][0.4131  3本  3黒  1白][0.3854  4本  4黒  1白][0.3588  5本  5黒  1白][0.3328  6本  6黒  1白][0.3078  7本  7黒  1白][0.2838  8本  8黒  1白][0.2599  9本  9黒  1白][0.2373 10本 10黒  1白][0.2156 11本 11黒  1白][0.1936 12本 12黒  1白][0.1729 13本 13黒  1白][0.1527 14本 14黒  1白][0.1332 15本 15黒  1白][0.1146 16本 16黒  1白][0.0958 17本 17黒  1白][0.0776 18本 18黒  1白][0.0605 19本 19黒  1白][0.0438 20本 20黒  1白][0.0279 21本 21黒  1白][0.0109 22本 22黒  1白]  （自動計算満了）
            [0.98, 0.0131, 33, 2_000_000,  1],  # r2_000_000 [0.4802  1本  1黒  1白][0.4606  2本  2黒  1白][0.4411  3本  3黒  1白][0.4222  4本  4黒  1白][0.4040  5本  5黒  1白][0.3855  6本  6黒  1白][0.3680  7本  7黒  1白][0.3504  8本  8黒  1白][0.3337  9本  9黒  1白][0.3172 10本 10黒  1白][0.3010 11本 11黒  1白][0.2846 12本 12黒  1白][0.2689 13本 13黒  1白][0.2533 14本 14黒  1白][0.2392 15本 15黒  1白][0.2242 16本 16黒  1白][0.2094 17本 17黒  1白][0.1954 18本 18黒  1白][0.1805 19本 19黒  1白][0.1672 20本 20黒  1白][0.1542 21本 21黒  1白][0.1415 22本 22黒  1白][0.1283 23本 23黒  1白][0.1156 24本 24黒  1白][0.1036 25本 25黒  1白][0.0910 26本 26黒  1白][0.0793 27本 27黒  1白][0.0681 28本 28黒  1白][0.0564 29本 29黒  1白][0.0463 30本 30黒  1白][0.0346 31本 31黒  1白][0.0239 32本 32黒  1白][0.0131 33本 33黒  1白]  （自動計算満了）
            [0.99, 0     ,  0,         0,  0],
        ]

        # 誤差は LIMIT に接近するほどベスト。勝率は最低で 0.0、最大で 1.0 なので、0.5 との誤差は 0.5 が最大
        # LIMIT 未満からさらに 0 に近づいていくので、そうなる前に打ち切る
        LIMIT = 0.02    # 例えば LIMIT = 0.03 にすると、黒番勝率 0.53 のときに 0.5 へ近づけるため 0.03 縮める必要があるから、運悪く 1:1 のときに外すと、そのあと見つけるのに時間がかかるようだ
        OUT_OF_ERROR = 0.51

        for rule in rule_list:
            black_win_rate=rule[0]
            best_black_win_error=rule[1]
            best_bout_count=rule[2]
            best_round_count=rule[3]
            best_white_require=rule[4]

            is_automatic = best_black_win_error >= LIMIT or best_bout_count == 0 or best_round_count < 2_000_000 or best_white_require == 0

            # 全部再計算。あとで消す
            #is_automatic = True

            # （仮説）何本勝負にするかは、以下の式で求まる
            # bout_count = round_letro(1/(1-black_win_rate)-1)
            # print(f"試算： 1 / ( 1 - {black_win_rate} ) - 1 = {bout_count} ※小数点以下四捨五入")
            # bout_count = math.floor(1/(1-black_win_rate)-1)
            # print(f"試算： 1 / ( 1 - {black_win_rate} ) - 1 = {bout_count} ※小数点以下切り捨て")
            #bout_count = math.ceil(1/(1-black_win_rate)-1)
            #print(f"試算： 1 / ( 1 - {black_win_rate} ) - 1 = {bout_count} ※小数点以下切り上げ")

            # 途中の計算式
            calculation_list = []

            # 比が同じになるｎ本勝負と白のｍ勝先取のペアはスキップしたい
            ration_set = set()

            # best_bout_count と best_white_require が未設定なら、アルゴリズムで求めることにする
            if is_automatic:
                best_black_win_count = 0
                best_bout_count = 0
                best_white_require = 0
                round_count = 2_000_000

                best_black_win_error = OUT_OF_ERROR

                is_cutoff = False

                for bout_count in range(1, 101):

                    # １本勝負のときだけ、白はｎ本－１ではない
                    if bout_count == 1:
                        end_white_require = 2
                    else:
                        end_white_require = bout_count

                    for white_require in range(1, end_white_require):

                        # 同じ比はスキップ。１０００倍して小数点以下四捨五入
                        ration = round_letro(white_require / bout_count * 1000)

                        if ration in ration_set:
                            continue

                        ration_set.add(ration)


                        black_win_count = n_round(
                            black_win_rate=black_win_rate,
                            bout_count=bout_count,
                            white_require=white_require,
                            round_count=round_count)
                        
                        #print(f"{black_win_count=}  {round_count=}  {black_win_count / round_count=}")
                        black_win_error = abs(black_win_count / round_count - 0.5)

                        if black_win_error < best_black_win_error:
                            best_black_win_error = black_win_error
                            best_bout_count = bout_count
                            best_black_win_count = black_win_count
                            best_white_require = white_require
                        
                            # 進捗バー（更新時）
                            text = f'[{best_black_win_error:6.4f} {best_bout_count:2}本 {best_bout_count-best_white_require+1:2}黒 {best_white_require:2}白]'
                            calculation_list.append(text)
                            print(text, end='')

                            # 十分な答えが出たので探索を打ち切ります
                            if black_win_error < LIMIT:
                                is_cutoff = True

                                # 進捗バー
                                print('x', end='')

                                break

                    if is_cutoff:
                        break

                    # 進捗バー
                    print('.', end='')
                print() # 改行

            # best_bout_count と best_white_require が設定されていれば、より細かく確率を求める
            else:
                pass


            with open('result_summary.log', 'a', encoding='utf8') as f:
                # 自動計算
                if is_automatic:
                    # 未完了
                    if best_black_win_error == OUT_OF_ERROR:
                        text = f"黒番勝率：{black_win_rate:4.02f}  {''.join(calculation_list)}  （自動計算未完了）\n"

                    # 満了
                    else:           
                        text = f"黒番勝率：{black_win_rate:4.02f}  {best_bout_count:2}本勝負×{round_count:6}回  黒{best_bout_count-best_white_require+1:2}本先取/白{best_white_require:2}本先取制  調整黒番勝率：{best_black_win_count * 100 / round_count:>7.04f} ％  {''.join(calculation_list)}  （自動計算満了）\n"
                
                # 手動設定
                else:
                    text = f"黒番勝率：{black_win_rate:4.02f}  {best_bout_count:2}本勝負×{best_round_count:6}回  黒{best_bout_count-best_white_require+1:2}本先取/白{best_white_require:2}本先取制  調整黒番勝率：{(best_black_win_error + 0.5) * 100:7.04f} ％  （手動設定）\n"

                f.write(text)
                print(text, end='')


    except Exception as err:
        print(f"[unexpected error] {err=}  {type(err)=}")

        # スタックトレース表示
        print(traceback.format_exc())

        raise
